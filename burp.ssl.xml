<?xml version="1.0"?>
<!DOCTYPE issues [
<!ELEMENT issues (issue*)>
<!ATTLIST issues burpVersion CDATA "">
<!ATTLIST issues exportTime CDATA "">
<!ELEMENT issue (serialNumber, type, name, host, path, location, severity, confidence, issueBackground?, remediationBackground?, references?, issueDetail?, issueDetailItems?, remediationDetail?, requestresponse*, collaboratorEvent*)>
<!ELEMENT serialNumber (#PCDATA)>
<!ELEMENT type (#PCDATA)>
<!ELEMENT name (#PCDATA)>
<!ELEMENT host (#PCDATA)>
<!ATTLIST host ip CDATA "">
<!ELEMENT path (#PCDATA)>
<!ELEMENT location (#PCDATA)>
<!ELEMENT severity (#PCDATA)>
<!ELEMENT confidence (#PCDATA)>
<!ELEMENT issueBackground (#PCDATA)>
<!ELEMENT remediationBackground (#PCDATA)>
<!ELEMENT references (#PCDATA)>
<!ELEMENT issueDetail (#PCDATA)>
<!ELEMENT issueDetailItems (issueDetailItem*)>
<!ELEMENT issueDetailItem (#PCDATA)>
<!ELEMENT remediationDetail (#PCDATA)>
<!ELEMENT requestresponse (request?, response?, responseRedirected?)>
<!ELEMENT request (#PCDATA)>
<!ATTLIST request method CDATA "">
<!ATTLIST request base64 (true|false) "false">
<!ELEMENT response (#PCDATA)>
<!ATTLIST response base64 (true|false) "false">
<!ELEMENT responseRedirected (#PCDATA)>
<!ELEMENT collaboratorEvent (interactionType, originIp, time, lookupType?, lookupHost?, requestresponse?)>
<!ELEMENT interactionType (#PCDATA)>
<!ELEMENT originIp (#PCDATA)>
<!ELEMENT time (#PCDATA)>
<!ELEMENT lookupType (#PCDATA)>
<!ELEMENT lookupHost (#PCDATA)>
]>
<issues burpVersion="1.6.30" exportTime="Sun Nov 22 21:00:47 PST 2015">
  <issue>
    <serialNumber>5211336074127813632</serialNumber>
    <type>8389120</type>
    <name>HTML does not specify charset</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/]]></path>
    <location><![CDATA[/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>
<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.
</p>]]></remediationBackground>
  </issue>
  <issue>
    <serialNumber>1552764981819960320</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-bin/]]></path>
    <location><![CDATA[/cgi-bin/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>5123421264168539136</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-bin/]]></path>
    <location><![CDATA[/cgi-bin/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>5474945537646863360</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-bin/view_release_notes.cgi]]></path>
    <location><![CDATA[/cgi-bin/view_release_notes.cgi]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/html; charset=ISO-8859-1</li></ul>The response states that it contains <b>HTML</b>. However, it actually appears to contain <b>plain text</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>8902795854888176640</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/]]></path>
    <location><![CDATA[/cgi-mod/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>9001949417710646272</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/]]></path>
    <location><![CDATA[/cgi-mod/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>690134593862907904</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/backup_config.cgi]]></path>
    <location><![CDATA[/cgi-mod/backup_config.cgi]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>7559022194967973888</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/backup_config.cgi]]></path>
    <location><![CDATA[/cgi-mod/backup_config.cgi]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>5517862218031626240</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/def_update.cgi]]></path>
    <location><![CDATA[/cgi-mod/def_update.cgi]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/plain; charset=utf-8</li></ul>The response states that it contains <b>plain text</b>. However, it actually appears to contain <b>JSON</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>4779100064696851456</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/index.cgi]]></path>
    <location><![CDATA[/cgi-mod/index.cgi]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/plain; charset=utf-8</li></ul>The response states that it contains <b>plain text</b>. However, it actually appears to contain <b>JSON</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>1542119312529264640</serialNumber>
    <type>3145984</type>
    <name>Cleartext submission of password</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/index.cgi]]></path>
    <location><![CDATA[/cgi-mod/index.cgi]]></location>
    <severity>High</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Some applications transmit passwords over unencrypted connections, making them vulnerable to interception. To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>
<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Applications should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The page contains a form with the following action URL, which is submitted over clear-text HTTP:<ul><li>http://10.15.86.80:8000/cgi-mod/index.cgi</li></ul>The form contains the following password field:<ul><li>UPDATE_update_proxy_password</li></ul>]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>1722657434195251200</serialNumber>
    <type>5243904</type>
    <name>Cross-domain Referer leakage</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/index.cgi]]></path>
    <location><![CDATA[/cgi-mod/index.cgi]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the "Referer" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>
<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>
<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>
<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>
<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The page was loaded from a URL containing a query string:<ul><li>http://10.15.86.80:8000/cgi-mod/index.cgi?auth_type=Local&amp;et=1447274918&amp;locale=en_US&amp;password=99af271d3ed71d353497dffd2df2ca15&amp;primary_tab=BASIC&amp;secondary_tab=ip_config&amp;user=admin</li></ul>The response contains the following link to another domain:<ul><li>http://www.barracudanetworks.com/?a=bvs_product</li></ul>]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>1221342559624842240</serialNumber>
    <type>5245312</type>
    <name>File upload functionality</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/index.cgi]]></path>
    <location><![CDATA[/cgi-mod/index.cgi]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>File upload functionality is commonly associated with a number of vulnerabilities, including:</p>
<ul>
<li>File path traversal</li><li>Persistent cross-site scripting</li><li>Placing of other client-executable code into the domain</li><li>Transmission of viruses and other malware</li><li>Denial of service</li></ul>
<p>You should review file upload functionality to understand its purpose, and establish whether uploaded content is ever returned to other application users, either through their normal usage of the application or by being fed a specific link by an attacker.</p>
<p>Some factors to consider when evaluating the security impact of this functionality include:</p>
<ul>
<li>Whether uploaded content can subsequently be downloaded via a URL within the application.</li><li>What Content-type and Content-disposition headers the application returns when the file's content is downloaded.</li><li>Whether it is possible to place executable HTML/JavaScript into the file, which executes when the file's contents are viewed.</li><li>Whether the application performs any filtering on the file extension or MIME type of the uploaded file.</li><li>Whether it is possible to construct a hybrid file containing both executable and non-executable content, to bypass any content filters - for example, a file containing both a GIF image and a Java archive (known as a GIFAR file).</li><li>What location is used to store uploaded content, and whether it is possible to supply a crafted filename to escape from this location.</li><li>Whether archive formats such as ZIP are unpacked by the application.</li><li>How the application handles attempts to upload very large files, or decompression bomb files.</li></ul>]]></issueBackground>
    <remediationBackground><![CDATA[<p>File upload functionality is not straightforward to implement securely. Some recommendations to consider in the design of this functionality include:</p>
<ul>
<li>Use a server-generated filename if storing uploaded files on disk.</li><li>Inspect the content of uploaded files, and enforce a whitelist of accepted, non-executable content types. Additionally, enforce a blacklist of common executable formats, to hinder hybrid file attacks.</li><li>Enforce a whitelist of accepted, non-executable file extensions.</li>
<li>If uploaded files are downloaded by users, supply an accurate non-generic Content-Type header, the X-Content-Type-Options: nosniff header, and also a Content-Disposition header that specifies that browsers should handle the file as an attachment.</li>
<li>Enforce a size limit on uploaded files (for defense-in-depth, this can be implemented both within application code and in the web server's configuration).</li><li>Reject attempts to upload archive formats such as ZIP.</li></ul>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://github.com/cure53/H5SC/tree/master/attachments">Various proof-of-concept files</a></li>
<li><a href="http://xs-sniper.com/blog/2008/12/17/sun-fixes-gifars/">The original GIFAR attack</a></li>
<li><a href="http://labs.detectify.com/post/120088174539/building-an-xss-polyglot-through-swf-and-csp">A more recent XSS polyglot attack</a></li>
</ul>]]></references>
    <issueDetail><![CDATA[The page contains a form which is used to submit a user-supplied file to the following URL:<ul><li>http://10.15.86.80:8000/cgi-mod/index.cgi</li></ul>Note that Burp has not identified any specific security vulnerabilities with this functionality, and you should manually review it to determine whether any problems exist.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>5094871748124855296</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/search.cgi]]></path>
    <location><![CDATA[/cgi-mod/search.cgi]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/plain; charset=utf-8</li></ul>The response states that it contains <b>plain text</b>. However, it actually appears to contain <b>JSON</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>9039757934691458048</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/search_kb.cgi]]></path>
    <location><![CDATA[/cgi-mod/search_kb.cgi]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/html; charset=ISO-8859-1</li></ul>The response states that it contains <b>HTML</b>. However, it actually appears to contain <b>script</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>8568445259983520768</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/uptime.cgi]]></path>
    <location><![CDATA[/cgi-mod/uptime.cgi]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/plain; charset=utf-8</li></ul>The response states that it contains <b>plain text</b>. However, it actually appears to contain <b>script</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>3753507806361422848</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/view_help.cgi]]></path>
    <location><![CDATA[/cgi-mod/view_help.cgi]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>tech-transfer@andrew.cmu.edu</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[tech-transfer@andrew.cmu.edu]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>7973342014949702656</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod/view_release_notes.cgi]]></path>
    <location><![CDATA[/cgi-mod/view_release_notes.cgi]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/html; charset=ISO-8859-1</li></ul>The response states that it contains <b>HTML</b>. However, it actually appears to contain <b>plain text</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>5604164653786743808</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod]]></path>
    <location><![CDATA[/cgi-mod]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>3650541512432750592</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod]]></path>
    <location><![CDATA[/cgi-mod]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>6732033172795693056</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.asp]]></path>
    <location><![CDATA[/cgi-mod.asp]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>4230291235218547712</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.asp]]></path>
    <location><![CDATA[/cgi-mod.asp]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>7288414541758664704</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.aspx]]></path>
    <location><![CDATA[/cgi-mod.aspx]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>5591599753813470208</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.aspx]]></path>
    <location><![CDATA[/cgi-mod.aspx]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>8962520744780737536</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.htm]]></path>
    <location><![CDATA[/cgi-mod.htm]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>4314148287563724800</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.htm]]></path>
    <location><![CDATA[/cgi-mod.htm]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>7157354160302212096</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.html]]></path>
    <location><![CDATA[/cgi-mod.html]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>2910216716640479232</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.html]]></path>
    <location><![CDATA[/cgi-mod.html]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>7042162421165968384</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.jsp]]></path>
    <location><![CDATA[/cgi-mod.jsp]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>6016586412828643328</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.jsp]]></path>
    <location><![CDATA[/cgi-mod.jsp]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>6179014285189883904</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.php]]></path>
    <location><![CDATA[/cgi-mod.php]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>481967546448434176</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cgi-mod.php]]></path>
    <location><![CDATA[/cgi-mod.php]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>493771426903642112</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/css/]]></path>
    <location><![CDATA[/css/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>1049670614196884480</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/css/]]></path>
    <location><![CDATA[/css/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>385650243860155392</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cui/]]></path>
    <location><![CDATA[/cui/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>4207170709647507456</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cui/]]></path>
    <location><![CDATA[/cui/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>5883379429918958592</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cui/images/]]></path>
    <location><![CDATA[/cui/images/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>1154091692080617472</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cui/images/]]></path>
    <location><![CDATA[/cui/images/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>3938262628396939264</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cui/images/favicon.ico]]></path>
    <location><![CDATA[/cui/images/favicon.ico]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/plain</li></ul>The response states that it contains <b>plain text</b>. However, it actually appears to contain <b>unrecognized content</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>7331708634214434816</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cui/modules/]]></path>
    <location><![CDATA[/cui/modules/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>2686355686362685440</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cui/modules/]]></path>
    <location><![CDATA[/cui/modules/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>5770164227772933120</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cui/modules/css/]]></path>
    <location><![CDATA[/cui/modules/css/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>9201214697647706112</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cui/modules/css/]]></path>
    <location><![CDATA[/cui/modules/css/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>5613728304870632448</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cui/modules/js/]]></path>
    <location><![CDATA[/cui/modules/js/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>5150623938355687424</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/cui/modules/js/]]></path>
    <location><![CDATA[/cui/modules/js/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>5860615768858431488</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/help/]]></path>
    <location><![CDATA[/help/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>3011833244781249536</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/help/]]></path>
    <location><![CDATA[/help/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>5537257708167837696</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/help/BarracudaREFMIB]]></path>
    <location><![CDATA[/help/BarracudaREFMIB]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/plain</li></ul>The response states that it contains <b>plain text</b>. However, it actually appears to contain <b>script</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>683822751513005056</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/help/administration]]></path>
    <location><![CDATA[/help/administration]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>2971553724595648512</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/help/administration]]></path>
    <location><![CDATA[/help/administration]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/plain</li></ul>The response states that it contains <b>plain text</b>. However, it actually appears to contain <b>HTML</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>471421000375236608</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/help/backup]]></path>
    <location><![CDATA[/help/backup]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/plain</li></ul>The response states that it contains <b>plain text</b>. However, it actually appears to contain <b>HTML</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>4885348410551670784</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/help/backup_configuration]]></path>
    <location><![CDATA[/help/backup_configuration]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>3946577792980507648</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/help/backup_configuration]]></path>
    <location><![CDATA[/help/backup_configuration]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/plain</li></ul>The response states that it contains <b>plain text</b>. However, it actually appears to contain <b>HTML</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>7044881636104888320</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/]]></path>
    <location><![CDATA[/images/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>3886439463102284800</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/]]></path>
    <location><![CDATA[/images/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>1113175537673580544</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/default/]]></path>
    <location><![CDATA[/images/default/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>3907897326589090816</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/default/]]></path>
    <location><![CDATA[/images/default/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>5336017858792869888</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/default/form/]]></path>
    <location><![CDATA[/images/default/form/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>3014921835430091776</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/default/form/]]></path>
    <location><![CDATA[/images/default/form/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>6437666158452795392</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/default/menu/]]></path>
    <location><![CDATA[/images/default/menu/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>120299720888833024</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/default/menu/]]></path>
    <location><![CDATA[/images/default/menu/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>6392095565878400000</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/default/progress/]]></path>
    <location><![CDATA[/images/default/progress/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>2678631703264595968</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/default/progress/]]></path>
    <location><![CDATA[/images/default/progress/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>8094368490071668736</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/default/shared/]]></path>
    <location><![CDATA[/images/default/shared/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>7904663744028721152</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/default/shared/]]></path>
    <location><![CDATA[/images/default/shared/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>8212462426598676480</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/icons/]]></path>
    <location><![CDATA[/images/icons/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>6488669868405760000</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/icons/]]></path>
    <location><![CDATA[/images/icons/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>6308410158291435520</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/logos/]]></path>
    <location><![CDATA[/images/logos/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>5422364715218470912</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/images/logos/]]></path>
    <location><![CDATA[/images/logos/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>2552366664682909696</serialNumber>
    <type>8389120</type>
    <name>HTML does not specify charset</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/index.html]]></path>
    <location><![CDATA[/index.html]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>
<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.
</p>]]></remediationBackground>
  </issue>
  <issue>
    <serialNumber>2122244820681995264</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/]]></path>
    <location><![CDATA[/js/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>8500867280217018368</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/]]></path>
    <location><![CDATA[/js/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>3836715528797879296</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/calendar/]]></path>
    <location><![CDATA[/js/calendar/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>4853303280773292032</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/calendar/]]></path>
    <location><![CDATA[/js/calendar/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>746524097518955520</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/ext-all.js]]></path>
    <location><![CDATA[/js/ext-all.js]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email addresses were disclosed in the response:<ul><li>licensing@sencha.com</li><li>user@example.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[licensing@sencha.com]]></issueDetailItem>
      <issueDetailItem><![CDATA[user@example.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>6026067556515907584</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/ext-base.js]]></path>
    <location><![CDATA[/js/ext-base.js]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>licensing@sencha.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[licensing@sencha.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>615973705351180288</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/ext-prototype-adapter.js]]></path>
    <location><![CDATA[/js/ext-prototype-adapter.js]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>licensing@sencha.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[licensing@sencha.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>2542806300729360384</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/highcharts/]]></path>
    <location><![CDATA[/js/highcharts/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>4696025046569086976</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/highcharts/]]></path>
    <location><![CDATA[/js/highcharts/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>6320994410466508800</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/highcharts/adapters/]]></path>
    <location><![CDATA[/js/highcharts/adapters/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>1452823785074403328</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/highcharts/adapters/]]></path>
    <location><![CDATA[/js/highcharts/adapters/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>7319334679403844608</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/highcharts/modules/]]></path>
    <location><![CDATA[/js/highcharts/modules/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>6080833375052514304</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/highcharts/modules/]]></path>
    <location><![CDATA[/js/highcharts/modules/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>3536018007763301376</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/highcharts/themes/]]></path>
    <location><![CDATA[/js/highcharts/themes/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>6435859055418483712</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/highcharts/themes/]]></path>
    <location><![CDATA[/js/highcharts/themes/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>7979566666036665344</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/scriptaculous/]]></path>
    <location><![CDATA[/js/scriptaculous/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>2650324348846009344</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js/scriptaculous/]]></path>
    <location><![CDATA[/js/scriptaculous/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>5288215058715443200</serialNumber>
    <type>5247488</type>
    <name>DOM data manipulation (DOM-based)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.
</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>window.open()</b> via the following statements:<ul><li>var window_name = window.name + id.replace(/\W/g, "_");</li><li>message_detail_win = window.open('/cgi-mod/view_message_log_detail.cgi?id='+id+'&amp;user='+email+'&amp;email='+email+'&amp;locale='+locale+'&amp;machine='+machine+'&amp;</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>8125505860125473792</serialNumber>
    <type>5247488</type>
    <name>DOM data manipulation (DOM-based)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.
</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>window.open()</b> via the following statements:<ul><li>window_name = window.name;</li><li>message_detail_win = window.open('/cgi-mod/view_message_log_detail.cgi?id='+id+'&amp;user='+email+'&amp;email='+email+'&amp;locale='+locale+'&amp;machine='+machine+'&amp;</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>6990286070948552704</serialNumber>
    <type>5247488</type>
    <name>DOM data manipulation (DOM-based)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.
</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>window.open()</b> via the following statements:<ul><li>var window_name = window.name + id.replace(/\W/g, "_");</li><li>message_detail_win = window.open(url+'&amp;id='+id+'&amp;machine='+machine, window_name, 'width=700,height=600,scrollbars=yes,resizable=yes');</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>2427249471764557824</serialNumber>
    <type>5247488</type>
    <name>DOM data manipulation (DOM-based)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.
</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>window.open()</b> via the following statements:<ul><li>window_name = window.name;</li><li>message_detail_win = window.open(url+'&amp;id='+id+'&amp;machine='+machine, window_name, 'width=700,height=600,scrollbars=yes,resizable=yes');</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>7299716625872231424</serialNumber>
    <type>2097952</type>
    <name>JavaScript injection (DOM-based)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based JavaScript injection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and executes this data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>self.name</b> and written to <b>eval()</b> via the following statements:<ul><li>var base_name = self.name.replace(/__[0-9]$/, "");</li><li>next_octet_name = base_name + "__" + (next_octet_number);</li><li>new_octet_object = eval("document.getElementById('"+next_octet_name+"')");</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>463095749158366208</serialNumber>
    <type>2097952</type>
    <name>JavaScript injection (DOM-based)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based JavaScript injection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and executes this data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>self.name</b> and written to <b>eval()</b> via the following statements:<ul><li>var base_name = self.name.replace(/__[0-9]$/, "");</li><li>next_octet_name = base_name + "__" + (next_octet_number);</li><li>new_octet_object = eval("document.getElementById('"+next_octet_name+"')");</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>3988924145161363456</serialNumber>
    <type>2097952</type>
    <name>JavaScript injection (DOM-based)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based JavaScript injection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and executes this data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>self.name</b> and written to <b>eval()</b> via the following statements:<ul><li>var base_name = self.name.replace(/__[0-9]$/, "");</li><li>next_octet_name = base_name + "__" + (next_octet_number);</li><li>new_octet_object = eval("document.getElementById('"+next_octet_name+"')");</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>904366585279415296</serialNumber>
    <type>2097952</type>
    <name>JavaScript injection (DOM-based)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based JavaScript injection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and executes this data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>self.name</b> and written to <b>eval()</b> via the following statements:<ul><li>var base_name = self.name.replace(/__[0-9]$/, "");</li><li>prev_octet_name = base_name + "__" + (prev_octet_number);</li><li>new_octet_object = eval("document.getElementById('"+prev_octet_name+"')");</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>3320922803740786688</serialNumber>
    <type>8389120</type>
    <name>HTML does not specify charset</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/reset.html]]></path>
    <location><![CDATA[/reset.html]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>
<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.
</p>]]></remediationBackground>
  </issue>
  <issue>
    <serialNumber>6552793635187248128</serialNumber>
    <type>5243152</type>
    <name>Open redirection (DOM-based)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/reset.html]]></path>
    <location><![CDATA[/reset.html]]></location>
    <severity>Low</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>
<p><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based open redirection. Data is read from <b>location</b> and written to <b>the 'source' property of a DOM element</b> via the following statements:<ul><li>var return_url = location;</li><li>return return_url;</li><li>uptime_result_script.src = get_full_url(url);</li></ul>]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>8304042040888326144</serialNumber>
    <type>5243152</type>
    <name>Open redirection (DOM-based)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/reset.html]]></path>
    <location><![CDATA[/reset.html]]></location>
    <severity>Low</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>
<p><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based open redirection. Data is read from <b>location</b> and written to <b>the 'source' property of a DOM element</b> via the following statements:<ul><li>return_url= url_parameters.proto....proto+ "://" + url_parameters.ip + ....ip+ ":" + url_parameters.port ....port+ location;</li><li>return return_url;</li><li>uptime_result_script.src = get_full_url(url);</li></ul>]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>3816814249206153216</serialNumber>
    <type>6292992</type>
    <name>Robots.txt file</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/robots.txt]]></path>
    <location><![CDATA[/robots.txt]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>
<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The web server contains a robots.txt file.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>2112611595977159680</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/tmpcharts/]]></path>
    <location><![CDATA[/tmpcharts/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>902500234582107136</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">http://10.15.86.80:8000</host>
    <path><![CDATA[/tmpcharts/]]></path>
    <location><![CDATA[/tmpcharts/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>8355297890008272896</serialNumber>
    <type>16777472</type>
    <name>SSL certificate</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/]]></path>
    <location><![CDATA[/]]></location>
    <severity>Medium</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SSL (or TLS) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an SSL certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, SSL connections to the server will not provide the full protection for which SSL is designed.</p>
<p>It should be noted that various attacks exist against SSL in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise SSL connections without user detection even when a valid SSL certificate is used. </p>]]></issueBackground>
    <references><![CDATA[<ul><li><a href="https://wiki.mozilla.org/Security/Server_Side_TLS">SSL/TLS Configuration Guide</a></li></ul>]]></references>
    <issueDetail><![CDATA[The following problem was identified with the server's SSL certificate:<ul><li>The server's certificate is not valid for the server's hostname.</li></ul>The server presented the following certificates:<br><br><h4>Server certificate</h4><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>*.bnsec.cuda-inc.com, bnsec.cuda-inc.com</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>DigiCert SHA2 High Assurance Server CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Wed Jul 02 17:00:00 PDT 2014</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Thu Jul 06 05:00:00 PDT 2017</td></tr></table><h4>Certificate chain #1</h4><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>DigiCert SHA2 High Assurance Server CA</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>DigiCert High Assurance EV Root CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Tue Oct 22 05:00:00 PDT 2013</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Sun Oct 22 05:00:00 PDT 2028</td></tr></table><h4>Certificate chain #2</h4><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>DigiCert High Assurance EV Root CA</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>DigiCert High Assurance EV Root CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Thu Nov 09 16:00:00 PST 2006</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Sun Nov 09 16:00:00 PST 2031</td></tr></table><h4>Certificate chain #3</h4><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>DigiCert High Assurance EV Root CA</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>DigiCert High Assurance EV Root CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Thu Nov 09 16:00:00 PST 2006</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Sun Nov 09 16:00:00 PST 2031</td></tr></table><h4>Certificate chain #4</h4><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>DigiCert High Assurance EV Root CA</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>DigiCert High Assurance EV Root CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Thu Nov 09 16:00:00 PST 2006</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Sun Nov 09 16:00:00 PST 2031</td></tr></table>]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>7718690084629658624</serialNumber>
    <type>7340288</type>
    <name>Cacheable HTTPS response</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/]]></path>
    <location><![CDATA[/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:</p>
<ul>
<li>Cache-control: no-store</li><li>Pragma: no-cache</li></ul>]]></remediationBackground>
  </issue>
  <issue>
    <serialNumber>222353025376407552</serialNumber>
    <type>8389120</type>
    <name>HTML does not specify charset</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/]]></path>
    <location><![CDATA[/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>
<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.
</p>]]></remediationBackground>
  </issue>
  <issue>
    <serialNumber>5662775423736359936</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/cgi-bin/]]></path>
    <location><![CDATA[/cgi-bin/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>1385893149591851008</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/cgi-bin/]]></path>
    <location><![CDATA[/cgi-bin/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>4444618217395295232</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/cgi-mod/]]></path>
    <location><![CDATA[/cgi-mod/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>6140088180365649920</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/cgi-mod/]]></path>
    <location><![CDATA[/cgi-mod/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>3529002718950224896</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/cui/]]></path>
    <location><![CDATA[/cui/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>7150974986478144512</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/cui/]]></path>
    <location><![CDATA[/cui/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>356601463416036352</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/cui/images/]]></path>
    <location><![CDATA[/cui/images/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>8023246729442547712</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/cui/images/]]></path>
    <location><![CDATA[/cui/images/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>8558732246089566208</serialNumber>
    <type>7340288</type>
    <name>Cacheable HTTPS response</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/cui/images/favicon.ico]]></path>
    <location><![CDATA[/cui/images/favicon.ico]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:</p>
<ul>
<li>Cache-control: no-store</li><li>Pragma: no-cache</li></ul>]]></remediationBackground>
  </issue>
  <issue>
    <serialNumber>4815801718164822016</serialNumber>
    <type>8389632</type>
    <name>Content type incorrectly stated</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/cui/images/favicon.ico]]></path>
    <location><![CDATA[/cui/images/favicon.ico]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>
<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The response contains the following Content-type statement:<ul><li>Content-Type: text/plain</li></ul>The response states that it contains <b>plain text</b>. However, it actually appears to contain <b>unrecognized content</b>.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>5240598843348093952</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/help/]]></path>
    <location><![CDATA[/help/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>606943553096229888</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/help/]]></path>
    <location><![CDATA[/help/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>1396227683781269504</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/images/]]></path>
    <location><![CDATA[/images/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>8729468492998910976</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/images/]]></path>
    <location><![CDATA[/images/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>7971555645228947456</serialNumber>
    <type>5245344</type>
    <name>Frameable response (potential Clickjacking)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js/]]></path>
    <location><![CDATA[/js/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
  </issue>
  <issue>
    <serialNumber>5696868236803954688</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js/]]></path>
    <location><![CDATA[/js/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>support@barracuda.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[support@barracuda.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>7712637792018560000</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js/ext-all.js]]></path>
    <location><![CDATA[/js/ext-all.js]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email addresses were disclosed in the response:<ul><li>licensing@sencha.com</li><li>user@example.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[licensing@sencha.com]]></issueDetailItem>
      <issueDetailItem><![CDATA[user@example.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>5959912321691970560</serialNumber>
    <type>6291968</type>
    <name>Email addresses disclosed</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js/ext-base.js]]></path>
    <location><![CDATA[/js/ext-base.js]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>
<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>
<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The following email address was disclosed in the response:<ul><li>licensing@sencha.com</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[licensing@sencha.com]]></issueDetailItem>
    </issueDetailItems>
  </issue>
  <issue>
    <serialNumber>4492681451269891072</serialNumber>
    <type>5247488</type>
    <name>DOM data manipulation (DOM-based)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.
</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>window.open()</b> via the following statements:<ul><li>var window_name = window.name + id.replace(/\W/g, "_");</li><li>message_detail_win = window.open('/cgi-mod/view_message_log_detail.cgi?id='+id+'&amp;user='+email+'&amp;email='+email+'&amp;locale='+locale+'&amp;machine='+machine+'&amp;</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>8678434152339015680</serialNumber>
    <type>5247488</type>
    <name>DOM data manipulation (DOM-based)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.
</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>window.open()</b> via the following statements:<ul><li>window_name = window.name;</li><li>message_detail_win = window.open('/cgi-mod/view_message_log_detail.cgi?id='+id+'&amp;user='+email+'&amp;email='+email+'&amp;locale='+locale+'&amp;machine='+machine+'&amp;</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>5292054251896419328</serialNumber>
    <type>5247488</type>
    <name>DOM data manipulation (DOM-based)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.
</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>window.open()</b> via the following statements:<ul><li>var window_name = window.name + id.replace(/\W/g, "_");</li><li>message_detail_win = window.open(url+'&amp;id='+id+'&amp;machine='+machine, window_name, 'width=700,height=600,scrollbars=yes,resizable=yes');</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>8172179019005584384</serialNumber>
    <type>5247488</type>
    <name>DOM data manipulation (DOM-based)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.
</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>window.open()</b> via the following statements:<ul><li>window_name = window.name;</li><li>message_detail_win = window.open(url+'&amp;id='+id+'&amp;machine='+machine, window_name, 'width=700,height=600,scrollbars=yes,resizable=yes');</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>4541440911645247488</serialNumber>
    <type>2097952</type>
    <name>JavaScript injection (DOM-based)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based JavaScript injection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and executes this data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>self.name</b> and written to <b>eval()</b> via the following statements:<ul><li>var base_name = self.name.replace(/__[0-9]$/, "");</li><li>next_octet_name = base_name + "__" + (next_octet_number);</li><li>new_octet_object = eval("document.getElementById('"+next_octet_name+"')");</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>8616601543369760768</serialNumber>
    <type>2097952</type>
    <name>JavaScript injection (DOM-based)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based JavaScript injection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and executes this data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>self.name</b> and written to <b>eval()</b> via the following statements:<ul><li>var base_name = self.name.replace(/__[0-9]$/, "");</li><li>next_octet_name = base_name + "__" + (next_octet_number);</li><li>new_octet_object = eval("document.getElementById('"+next_octet_name+"')");</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>4295073123755246592</serialNumber>
    <type>2097952</type>
    <name>JavaScript injection (DOM-based)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based JavaScript injection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and executes this data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>self.name</b> and written to <b>eval()</b> via the following statements:<ul><li>var base_name = self.name.replace(/__[0-9]$/, "");</li><li>next_octet_name = base_name + "__" + (next_octet_number);</li><li>new_octet_object = eval("document.getElementById('"+next_octet_name+"')");</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>558848425823260672</serialNumber>
    <type>2097952</type>
    <name>JavaScript injection (DOM-based)</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/js_functions.js]]></path>
    <location><![CDATA[/js_functions.js]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based JavaScript injection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and executes this data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>self.name</b> and written to <b>eval()</b> via the following statements:<ul><li>var base_name = self.name.replace(/__[0-9]$/, "");</li><li>prev_octet_name = base_name + "__" + (prev_octet_number);</li><li>new_octet_object = eval("document.getElementById('"+prev_octet_name+"')");</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>5646954250157495296</serialNumber>
    <type>6292992</type>
    <name>Robots.txt file</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/robots.txt]]></path>
    <location><![CDATA[/robots.txt]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>
<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>]]></remediationBackground>
    <issueDetail><![CDATA[The web server contains a robots.txt file.]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>6834178700610155520</serialNumber>
    <type>7340288</type>
    <name>Cacheable HTTPS response</name>
    <host ip="10.15.86.80">https://10.15.86.80:8443</host>
    <path><![CDATA[/robots.txt]]></path>
    <location><![CDATA[/robots.txt]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:</p>
<ul>
<li>Cache-control: no-store</li><li>Pragma: no-cache</li></ul>]]></remediationBackground>
  </issue>
</issues>
